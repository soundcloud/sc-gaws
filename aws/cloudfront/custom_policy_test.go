package cloudfront

import (
	"encoding/base64"
	"testing"
)

func TestBasicCustomPolicyString(t *testing.T) {
	customPolicy := NewCustomPolicy(testURL, testExpiryTime)
	expectedString := `{"Statement":[{"Resource":"http://d5helwpxwoaq8.cloudfront.net/3tGKc9yN1IfN.128.mp3","Condition":{"DateLessThan":{"AWS:EpochTime":1412799136}}}]}`

	if customPolicy.String() != expectedString {
		t.Fatalf("policy strings didn't match: expected %s, got %s", expectedString, customPolicy.String())
	}
}

func TestCustomPolicyStringWithStartDate(t *testing.T) {
	customPolicy := NewCustomPolicy(testURL, testExpiryTime).AddStartTime(testStartTime)
	expectedString := `{"Statement":[{"Resource":"http://d5helwpxwoaq8.cloudfront.net/3tGKc9yN1IfN.128.mp3","Condition":{"DateLessThan":{"AWS:EpochTime":1412799136},"DateGreaterThan":{"AWS:EpochTime":1412799000}}}]}`

	if customPolicy.String() != expectedString {
		t.Fatalf("policy strings didn't match: expected %s, got %s", expectedString, customPolicy.String())
	}
}

func TestCustomPolicyStringWithStartDateAndSourceIP(t *testing.T) {
	customPolicy := NewCustomPolicy(testURL, testExpiryTime).AddStartTime(testStartTime).AddSourceIP(testSourceIP)
	expectedString := `{"Statement":[{"Resource":"http://d5helwpxwoaq8.cloudfront.net/3tGKc9yN1IfN.128.mp3","Condition":{"DateLessThan":{"AWS:EpochTime":1412799136},"DateGreaterThan":{"AWS:EpochTime":1412799000},"IpAddress":{"AWS:SourceIp":"192.0.2.1"}}}]}`

	if customPolicy.String() != expectedString {
		t.Fatalf("policy strings didn't match: expected %s, got %s", expectedString, customPolicy.String())
	}
}

func TestCustomPolicySignWithPrivateKey(t *testing.T) {
	// Expected signature, for convenience is base64 encoded
	// Generated with:
	// echo -n custom_policy_content | openssl sha1 -sign test_private_key.pem | openssl base64 | tr -d '\n'
	// where custom_policy_content is equal to expectedCustomPolicyString
	expectedCustomPolicySignature := `xEbhq3QI57fcobwlQL85esB2l+QuOroXdi15XTSXij2rw1LTxzjFIGK5w6f+KBscbO0vrVh/5DAbae7wPqRak0W3A+2h6IUV1AysggyIt0E1BCHjPe2iVDVdZdZ3tytEY1dAjv7kxZvqETzue8w3NyZqaW9lHIPKkMmn+Kyv0+2J5lFUymqud/LE/9ks65PReBwf+HPusPucb61cZdDWH7ccB4z4uGy5Osd09zR+yY9Q5cy65NkNZyd+z4UT+Aoj3CcIL9H4Zg6G7n1SufWaki4rNGdod+gTUhYeTqKbkI/SmzTphC6okRSBU/RvdSYde1GrpYts61KP6Vcts3GXRQ==`

	customPolicy := NewCustomPolicy(testURL, testExpiryTime).AddStartTime(testStartTime).AddSourceIP(testSourceIP)

	// Create an rsa.PrivateKey
	pk, err := NewRSAPrivateKeyFromBytes([]byte(privateKey))
	if err != nil {
		t.Fatalf("%s", err)
	}

	// Sign it
	signed, err := customPolicy.signWithPrivateKey(pk)

	if err != nil {
		t.Fatalf("%s", err)
	}

	// encode our signature in base64
	signedb64 := base64.StdEncoding.EncodeToString([]byte(signed))

	// compare it with the one generated by openssl
	if signedb64 != expectedCustomPolicySignature {
		t.Fatalf("signature does not match\n--- Got ---\n%v\n--- Expected ---\n%v\n", signedb64, expectedCustomPolicySignature)
	}
}
