package cloudfront

import (
	"encoding/base64"
	"testing"
	"time"
)

var cannedPolicy = CannedPolicy{
	Url:       "http://d5helwpxwoaq8.cloudfront.net/3tGKc9yN1IfN.128.mp3",
	ExpiresAt: time.Unix(1412799136, 0),
}

// This is the Canned Policy we are going to test with
var expectedCannedPolicyString = `{"Statement":[{"Resource":"http://d5helwpxwoaq8.cloudfront.net/3tGKc9yN1IfN.128.mp3","Condition":{"DateLessThan":{"AWS:EpochTime":1412799136}}}]}`

// Expected signature, for convenience is base64 encoded
// Generated with:
// echo -n canned_policy_content | openssl sha1 -sign test_private_key.pem | openssl base64
// where canned_policy_content is equal to expectedCannedPolicyString
var expectedBase64Signature = `ad9AA87ApevgO6cyNqlDqMOk0f35QCe7YbWyeY13vifI7xPEqyc85Nf9XBNtzyHZDD+u+nN5wcgByuMlMwN9yLDEV0B6AHVzKmcOyFuJKVqxGffrOh7LxxjpNImTJ1EgXHO+kY+buFHv5yoWraqGI7rMQ88a/dxViLrK7JL3yAQAV7HNes8dN8J1PIgTg1gSBKvNuH1QGjjyBJMcReY0kMJZsJVikHAx3N76xRzIPRBXd1+d9Q/6X6kWy8N2GuV9i4fpoa4Svwirz/HlvWjStuXN6Go7HSOnqLBCSLHnmwxhFrGFrqwTzNy671sw8VeT4NBZCrwrOtrfdAEevsen0w==`

func TestStringer(t *testing.T) {
	cannedPolicyString := cannedPolicy.String()

	if cannedPolicyString != expectedCannedPolicyString {
		t.Fatalf("Invalid canned policy")
	}
}

func TestSignWithPrivateKey(t *testing.T) {
	// Create an rsa.PrivateKey
	pk, err := NewRSAPrivateKeyFromBytes([]byte(privateKey))

	if err != nil {
		t.Fatalf("%s", err)
	}

	// Sign it
	signed, err := cannedPolicy.signWithPrivateKey(pk)

	if err != nil {
		t.Fatalf("%s", err)
	}

	// encode our signature in base64
	signedb64 := base64.StdEncoding.EncodeToString([]byte(signed))

	// compare it with the one generated by openssl
	if signedb64 != expectedBase64Signature {
		t.Fatalf("Signature does not match\n:%v", signedb64)
	}
}
